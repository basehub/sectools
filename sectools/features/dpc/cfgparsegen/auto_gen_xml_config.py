#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated  by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class debugpolicy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, metadata=None, file_properties=None):
        self.metadata = metadata
        self.file_properties = file_properties
    def factory(*args_, **kwargs_):
        if debugpolicy.subclass:
            return debugpolicy.subclass(*args_, **kwargs_)
        else:
            return debugpolicy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_metadata(self): return self.metadata
    def set_metadata(self, metadata): self.metadata = metadata
    def get_file_properties(self): return self.file_properties
    def set_file_properties(self, file_properties): self.file_properties = file_properties
    def export(self, outfile, level, namespace_='tns:', name_='debugpolicy', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='debugpolicy')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='debugpolicy'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='debugpolicy', fromsubclass_=False):
        if self.metadata is not None:
            self.metadata.export(outfile, level, namespace_, name_='metadata', )
        if self.file_properties is not None:
            self.file_properties.export(outfile, level, namespace_, name_='file_properties', )
    def hasContent_(self):
        if (
            self.metadata is not None or
            self.file_properties is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='debugpolicy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.metadata is not None:
            showIndent(outfile, level)
            outfile.write('metadata=model_.metadata(\n')
            self.metadata.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.file_properties is not None:
            showIndent(outfile, level)
            outfile.write('file_properties=model_.complex_file_properties(\n')
            self.file_properties.exportLiteral(outfile, level, name_='file_properties')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'metadata':
            obj_ = metadata.factory()
            obj_.build(child_)
            self.set_metadata(obj_)
        elif nodeName_ == 'file_properties':
            obj_ = complex_file_properties.factory()
            obj_.build(child_)
            self.set_file_properties(obj_)
# end class debugpolicy


class metadata(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, chipset=None, version=None):
        self.chipset = chipset
        self.version = version
    def factory(*args_, **kwargs_):
        if metadata.subclass:
            return metadata.subclass(*args_, **kwargs_)
        else:
            return metadata(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_chipset(self): return self.chipset
    def set_chipset(self, chipset): self.chipset = chipset
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def export(self, outfile, level, namespace_='tns:', name_='metadata', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='metadata')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='metadata'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='metadata', fromsubclass_=False):
        if self.chipset is not None:
            showIndent(outfile, level)
            outfile.write('<%schipset>%s</%schipset>\n' % (namespace_, self.gds_format_string(quote_xml(self.chipset).encode(ExternalEncoding), input_name='chipset'), namespace_))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('<%sversion>%s</%sversion>\n' % (namespace_, self.gds_format_string(quote_xml(self.version).encode(ExternalEncoding), input_name='version'), namespace_))
    def hasContent_(self):
        if (
            self.chipset is not None or
            self.version is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='metadata'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.chipset is not None:
            showIndent(outfile, level)
            outfile.write('chipset=%s,\n' % quote_python(self.chipset).encode(ExternalEncoding))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version=%s,\n' % quote_python(self.version).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chipset':
            chipset_ = child_.text
            chipset_ = self.gds_validate_string(chipset_, node, 'chipset')
            self.chipset = chipset_
        elif nodeName_ == 'version':
            version_ = child_.text
            version_ = self.gds_validate_string(version_, node, 'version')
            self.version = version_
# end class metadata


class complex_file_properties(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, revision=None, serial_number_start=None, serial_number_end=None, flags=None, image_bit_map=None, image_id_list=None, root_cert_hash_list=None, serial_num_list=None, root_cert_hash_qc_list=None, elf=None):
        self.revision = revision
        self.serial_number_start = serial_number_start
        self.serial_number_end = serial_number_end
        self.flags = flags
        self.image_bit_map = image_bit_map
        self.image_id_list = image_id_list
        self.root_cert_hash_list = root_cert_hash_list
        self.serial_num_list = serial_num_list
        self.root_cert_hash_qc_list = root_cert_hash_qc_list
        self.elf = elf
    def factory(*args_, **kwargs_):
        if complex_file_properties.subclass:
            return complex_file_properties.subclass(*args_, **kwargs_)
        else:
            return complex_file_properties(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_revision(self): return self.revision
    def set_revision(self, revision): self.revision = revision
    def get_serial_number_start(self): return self.serial_number_start
    def set_serial_number_start(self, serial_number_start): self.serial_number_start = serial_number_start
    def get_serial_number_end(self): return self.serial_number_end
    def set_serial_number_end(self, serial_number_end): self.serial_number_end = serial_number_end
    def get_flags(self): return self.flags
    def set_flags(self, flags): self.flags = flags
    def get_image_bit_map(self): return self.image_bit_map
    def set_image_bit_map(self, image_bit_map): self.image_bit_map = image_bit_map
    def get_image_id_list(self): return self.image_id_list
    def set_image_id_list(self, image_id_list): self.image_id_list = image_id_list
    def get_root_cert_hash_list(self): return self.root_cert_hash_list
    def set_root_cert_hash_list(self, root_cert_hash_list): self.root_cert_hash_list = root_cert_hash_list
    def get_serial_num_list(self): return self.serial_num_list
    def set_serial_num_list(self, serial_num_list): self.serial_num_list = serial_num_list
    def get_root_cert_hash_qc_list(self): return self.root_cert_hash_qc_list
    def set_root_cert_hash_qc_list(self, root_cert_hash_qc_list): self.root_cert_hash_qc_list = root_cert_hash_qc_list
    def get_elf(self): return self.elf
    def set_elf(self, elf): self.elf = elf
    def export(self, outfile, level, namespace_='tns:', name_='complex_file_properties', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_file_properties')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_file_properties'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_file_properties', fromsubclass_=False):
        if self.revision is not None:
            showIndent(outfile, level)
            outfile.write('<%srevision>%s</%srevision>\n' % (namespace_, self.gds_format_integer(self.revision, input_name='revision'), namespace_))
        if self.serial_number_start is not None:
            showIndent(outfile, level)
            outfile.write('<%sserial_number_start>%s</%sserial_number_start>\n' % (namespace_, self.gds_format_integer(self.serial_number_start, input_name='serial_number_start'), namespace_))
        if self.serial_number_end is not None:
            showIndent(outfile, level)
            outfile.write('<%sserial_number_end>%s</%sserial_number_end>\n' % (namespace_, self.gds_format_integer(self.serial_number_end, input_name='serial_number_end'), namespace_))
        if self.flags is not None:
            self.flags.export(outfile, level, namespace_, name_='flags', )
        if self.image_bit_map is not None:
            self.image_bit_map.export(outfile, level, namespace_, name_='image_bit_map')
        if self.image_id_list is not None:
            self.image_id_list.export(outfile, level, namespace_, name_='image_id_list')
        if self.root_cert_hash_list is not None:
            self.root_cert_hash_list.export(outfile, level, namespace_, name_='root_cert_hash_list', )
        if self.serial_num_list is not None:
            self.serial_num_list.export(outfile, level, namespace_, name_='serial_num_list')
        if self.root_cert_hash_qc_list is not None:
            self.root_cert_hash_qc_list.export(outfile, level, namespace_, name_='root_cert_hash_qc_list')
        if self.elf is not None:
            self.elf.export(outfile, level, namespace_, name_='elf', )
    def hasContent_(self):
        if (
            self.revision is not None or
            self.serial_number_start is not None or
            self.serial_number_end is not None or
            self.flags is not None or
            self.image_bit_map is not None or
            self.image_id_list is not None or
            self.root_cert_hash_list is not None or
            self.serial_num_list is not None or
            self.root_cert_hash_qc_list is not None or
            self.elf is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_file_properties'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.revision is not None:
            showIndent(outfile, level)
            outfile.write('revision=%d,\n' % self.revision)
        if self.serial_number_start is not None:
            showIndent(outfile, level)
            outfile.write('serial_number_start=%d,\n' % self.serial_number_start)
        if self.serial_number_end is not None:
            showIndent(outfile, level)
            outfile.write('serial_number_end=%d,\n' % self.serial_number_end)
        if self.flags is not None:
            showIndent(outfile, level)
            outfile.write('flags=model_.complex_flags(\n')
            self.flags.exportLiteral(outfile, level, name_='flags')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.image_bit_map is not None:
            showIndent(outfile, level)
            outfile.write('image_bit_map=model_.complex_image_bit_map(\n')
            self.image_bit_map.exportLiteral(outfile, level, name_='image_bit_map')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.image_id_list is not None:
            showIndent(outfile, level)
            outfile.write('image_id_list=model_.complex_image_id_list(\n')
            self.image_id_list.exportLiteral(outfile, level, name_='image_id_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.root_cert_hash_list is not None:
            showIndent(outfile, level)
            outfile.write('root_cert_hash_list=model_.complex_root_cert_hash_list(\n')
            self.root_cert_hash_list.exportLiteral(outfile, level, name_='root_cert_hash_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.serial_num_list is not None:
            showIndent(outfile, level)
            outfile.write('serial_num_list=model_.complex_serial_num_list(\n')
            self.serial_num_list.exportLiteral(outfile, level, name_='serial_num_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.root_cert_hash_qc_list is not None:
            showIndent(outfile, level)
            outfile.write('root_cert_hash_qc_list=model_.complex_root_cert_hash_qc_list(\n')
            self.root_cert_hash_qc_list.exportLiteral(outfile, level, name_='root_cert_hash_qc_list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.elf is not None:
            showIndent(outfile, level)
            outfile.write('elf=model_.complex_elf(\n')
            self.elf.exportLiteral(outfile, level, name_='elf')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'revision':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'revision')
            self.revision = ival_
        elif nodeName_ == 'serial_number_start':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'serial_number_start')
            self.serial_number_start = ival_
        elif nodeName_ == 'serial_number_end':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'serial_number_end')
            self.serial_number_end = ival_
        elif nodeName_ == 'flags':
            obj_ = complex_flags.factory()
            obj_.build(child_)
            self.set_flags(obj_)
        elif nodeName_ == 'image_bit_map':
            obj_ = complex_image_bit_map.factory()
            obj_.build(child_)
            self.set_image_bit_map(obj_)
        elif nodeName_ == 'image_id_list':
            obj_ = complex_image_id_list.factory()
            obj_.build(child_)
            self.set_image_id_list(obj_)
        elif nodeName_ == 'root_cert_hash_list':
            obj_ = complex_root_cert_hash_list.factory()
            obj_.build(child_)
            self.set_root_cert_hash_list(obj_)
        elif nodeName_ == 'serial_num_list':
            obj_ = complex_serial_num_list.factory()
            obj_.build(child_)
            self.set_serial_num_list(obj_)
        elif nodeName_ == 'root_cert_hash_qc_list':
            obj_ = complex_root_cert_hash_qc_list.factory()
            obj_.build(child_)
            self.set_root_cert_hash_qc_list(obj_)
        elif nodeName_ == 'elf':
            obj_ = complex_elf.factory()
            obj_.build(child_)
            self.set_elf(obj_)
# end class complex_file_properties


class complex_flags(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, flag=None):
        if flag is None:
            self.flag = []
        else:
            self.flag = flag
    def factory(*args_, **kwargs_):
        if complex_flags.subclass:
            return complex_flags.subclass(*args_, **kwargs_)
        else:
            return complex_flags(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_flag(self): return self.flag
    def set_flag(self, flag): self.flag = flag
    def add_flag(self, value): self.flag.append(value)
    def insert_flag(self, index, value): self.flag[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_flags', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_flags')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_flags'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_flags', fromsubclass_=False):
        for flag_ in self.flag:
            flag_.export(outfile, level, namespace_, name_='flag')
    def hasContent_(self):
        if (
            self.flag
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_flags'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('flag=[\n')
        level += 1
        for flag_ in self.flag:
            showIndent(outfile, level)
            outfile.write('model_.flagType(\n')
            flag_.exportLiteral(outfile, level, name_='flagType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'flag':
            obj_ = flagType.factory()
            obj_.build(child_)
            self.flag.append(obj_)
# end class complex_flags


class complex_image_bit_map(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, swid=None):
        if swid is None:
            self.swid = []
        else:
            self.swid = swid
    def factory(*args_, **kwargs_):
        if complex_image_bit_map.subclass:
            return complex_image_bit_map.subclass(*args_, **kwargs_)
        else:
            return complex_image_bit_map(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_swid(self): return self.swid
    def set_swid(self, swid): self.swid = swid
    def add_swid(self, value): self.swid.append(value)
    def insert_swid(self, index, value): self.swid[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_image_bit_map', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_image_bit_map')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_image_bit_map'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_image_bit_map', fromsubclass_=False):
        for swid_ in self.swid:
            swid_.export(outfile, level, namespace_, name_='swid')
    def hasContent_(self):
        if (
            self.swid
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_image_bit_map'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('swid=[\n')
        level += 1
        for swid_ in self.swid:
            showIndent(outfile, level)
            outfile.write('model_.swidType(\n')
            swid_.exportLiteral(outfile, level, name_='swidType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'swid':
            obj_ = swidType.factory()
            obj_.build(child_)
            self.swid.append(obj_)
# end class complex_image_bit_map


class complex_image_id_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, image_id=None):
        if image_id is None:
            self.image_id = []
        else:
            self.image_id = image_id
    def factory(*args_, **kwargs_):
        if complex_image_id_list.subclass:
            return complex_image_id_list.subclass(*args_, **kwargs_)
        else:
            return complex_image_id_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_image_id(self): return self.image_id
    def set_image_id(self, image_id): self.image_id = image_id
    def add_image_id(self, value): self.image_id.append(value)
    def insert_image_id(self, index, value): self.image_id[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_image_id_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_image_id_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_image_id_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_image_id_list', fromsubclass_=False):
        for image_id_ in self.image_id:
            showIndent(outfile, level)
            outfile.write('<%simage_id>%s</%simage_id>\n' % (namespace_, self.gds_format_string(quote_xml(image_id_).encode(ExternalEncoding), input_name='image_id'), namespace_))
    def hasContent_(self):
        if (
            self.image_id
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_image_id_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('image_id=[\n')
        level += 1
        for image_id_ in self.image_id:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(image_id_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'image_id':
            image_id_ = child_.text
            image_id_ = self.gds_validate_string(image_id_, node, 'image_id')
            self.image_id.append(image_id_)
# end class complex_image_id_list


class complex_root_cert_hash_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, root_cert_hash=None):
        if root_cert_hash is None:
            self.root_cert_hash = []
        else:
            self.root_cert_hash = root_cert_hash
    def factory(*args_, **kwargs_):
        if complex_root_cert_hash_list.subclass:
            return complex_root_cert_hash_list.subclass(*args_, **kwargs_)
        else:
            return complex_root_cert_hash_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_root_cert_hash(self): return self.root_cert_hash
    def set_root_cert_hash(self, root_cert_hash): self.root_cert_hash = root_cert_hash
    def add_root_cert_hash(self, value): self.root_cert_hash.append(value)
    def insert_root_cert_hash(self, index, value): self.root_cert_hash[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_root_cert_hash_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_root_cert_hash_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_root_cert_hash_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_root_cert_hash_list', fromsubclass_=False):
        for root_cert_hash_ in self.root_cert_hash:
            showIndent(outfile, level)
            outfile.write('<%sroot_cert_hash>%s</%sroot_cert_hash>\n' % (namespace_, self.gds_format_string(quote_xml(root_cert_hash_).encode(ExternalEncoding), input_name='root_cert_hash'), namespace_))
    def hasContent_(self):
        if (
            self.root_cert_hash
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_root_cert_hash_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('root_cert_hash=[\n')
        level += 1
        for root_cert_hash_ in self.root_cert_hash:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(root_cert_hash_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'root_cert_hash':
            root_cert_hash_ = child_.text
            root_cert_hash_ = self.gds_validate_string(root_cert_hash_, node, 'root_cert_hash')
            self.root_cert_hash.append(root_cert_hash_)
# end class complex_root_cert_hash_list


class complex_serial_num_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, serial_num=None):
        if serial_num is None:
            self.serial_num = []
        else:
            self.serial_num = serial_num
    def factory(*args_, **kwargs_):
        if complex_serial_num_list.subclass:
            return complex_serial_num_list.subclass(*args_, **kwargs_)
        else:
            return complex_serial_num_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_serial_num(self): return self.serial_num
    def set_serial_num(self, serial_num): self.serial_num = serial_num
    def add_serial_num(self, value): self.serial_num.append(value)
    def insert_serial_num(self, index, value): self.serial_num[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_serial_num_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_serial_num_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_serial_num_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_serial_num_list', fromsubclass_=False):
        for serial_num_ in self.serial_num:
            showIndent(outfile, level)
            outfile.write('<%sserial_num>%s</%sserial_num>\n' % (namespace_, self.gds_format_string(quote_xml(serial_num_).encode(ExternalEncoding), input_name='serial_num'), namespace_))
    def hasContent_(self):
        if (
            self.serial_num
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_serial_num_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('serial_num=[\n')
        level += 1
        for serial_num_ in self.serial_num:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(serial_num_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'serial_num':
            serial_num_ = child_.text
            serial_num_ = self.gds_validate_string(serial_num_, node, 'serial_num')
            self.serial_num.append(serial_num_)
# end class complex_serial_num_list


class complex_root_cert_hash_qc_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, root_cert_hash_qc=None):
        if root_cert_hash_qc is None:
            self.root_cert_hash_qc = []
        else:
            self.root_cert_hash_qc = root_cert_hash_qc
    def factory(*args_, **kwargs_):
        if complex_root_cert_hash_qc_list.subclass:
            return complex_root_cert_hash_qc_list.subclass(*args_, **kwargs_)
        else:
            return complex_root_cert_hash_qc_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_root_cert_hash_qc(self): return self.root_cert_hash_qc
    def set_root_cert_hash_qc(self, root_cert_hash_qc): self.root_cert_hash_qc = root_cert_hash_qc
    def add_root_cert_hash_qc(self, value): self.root_cert_hash_qc.append(value)
    def insert_root_cert_hash_qc(self, index, value): self.root_cert_hash_qc[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='complex_root_cert_hash_qc_list', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_root_cert_hash_qc_list')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_root_cert_hash_qc_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_root_cert_hash_qc_list', fromsubclass_=False):
        for root_cert_hash_qc_ in self.root_cert_hash_qc:
            showIndent(outfile, level)
            outfile.write('<%sroot_cert_hash_qc>%s</%sroot_cert_hash_qc>\n' % (namespace_, self.gds_format_string(quote_xml(root_cert_hash_qc_).encode(ExternalEncoding), input_name='root_cert_hash_qc'), namespace_))
    def hasContent_(self):
        if (
            self.root_cert_hash_qc
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_root_cert_hash_qc_list'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('root_cert_hash_qc=[\n')
        level += 1
        for root_cert_hash_qc_ in self.root_cert_hash_qc:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(root_cert_hash_qc_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'root_cert_hash_qc':
            root_cert_hash_qc_ = child_.text
            root_cert_hash_qc_ = self.gds_validate_string(root_cert_hash_qc_, node, 'root_cert_hash_qc')
            self.root_cert_hash_qc.append(root_cert_hash_qc_)
# end class complex_root_cert_hash_qc_list


class complex_elf(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, elf_class=None, phys_addr=None):
        self.elf_class = elf_class
        self.phys_addr = phys_addr
    def factory(*args_, **kwargs_):
        if complex_elf.subclass:
            return complex_elf.subclass(*args_, **kwargs_)
        else:
            return complex_elf(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_elf_class(self): return self.elf_class
    def set_elf_class(self, elf_class): self.elf_class = elf_class
    def get_phys_addr(self): return self.phys_addr
    def set_phys_addr(self, phys_addr): self.phys_addr = phys_addr
    def export(self, outfile, level, namespace_='tns:', name_='complex_elf', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complex_elf')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='complex_elf'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='complex_elf', fromsubclass_=False):
        if self.elf_class is not None:
            showIndent(outfile, level)
            outfile.write('<%self_class>%s</%self_class>\n' % (namespace_, self.gds_format_integer(self.elf_class, input_name='elf_class'), namespace_))
        if self.phys_addr is not None:
            showIndent(outfile, level)
            outfile.write('<%sphys_addr>%s</%sphys_addr>\n' % (namespace_, self.gds_format_string(quote_xml(self.phys_addr).encode(ExternalEncoding), input_name='phys_addr'), namespace_))
    def hasContent_(self):
        if (
            self.elf_class is not None or
            self.phys_addr is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='complex_elf'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.elf_class is not None:
            showIndent(outfile, level)
            outfile.write('elf_class=%d,\n' % self.elf_class)
        if self.phys_addr is not None:
            showIndent(outfile, level)
            outfile.write('phys_addr=%s,\n' % quote_python(self.phys_addr).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'elf_class':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'elf_class')
            self.elf_class = ival_
        elif nodeName_ == 'phys_addr':
            phys_addr_ = child_.text
            phys_addr_ = self.gds_validate_string(phys_addr_, node, 'phys_addr')
            self.phys_addr = phys_addr_
# end class complex_elf


class flagType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, bit_pos=None, value=None):
        self.bit_pos = bit_pos
        self.value = value
    def factory(*args_, **kwargs_):
        if flagType.subclass:
            return flagType.subclass(*args_, **kwargs_)
        else:
            return flagType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_bit_pos(self): return self.bit_pos
    def set_bit_pos(self, bit_pos): self.bit_pos = bit_pos
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='flagType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='flagType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='flagType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='flagType', fromsubclass_=False):
        if self.bit_pos is not None:
            showIndent(outfile, level)
            outfile.write('<%sbit_pos>%s</%sbit_pos>\n' % (namespace_, self.gds_format_integer(self.bit_pos, input_name='bit_pos'), namespace_))
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('<%svalue>%s</%svalue>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.value)), input_name='value'), namespace_))
    def hasContent_(self):
        if (
            self.bit_pos is not None or
            self.value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='flagType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.bit_pos is not None:
            showIndent(outfile, level)
            outfile.write('bit_pos=%d,\n' % self.bit_pos)
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('value=%s,\n' % self.value)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'bit_pos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'bit_pos')
            self.bit_pos = ival_
        elif nodeName_ == 'value':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'value')
            self.value = ival_
# end class flagType


class swidType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, bit_pos=None, value=None):
        self.bit_pos = bit_pos
        self.value = value
    def factory(*args_, **kwargs_):
        if swidType.subclass:
            return swidType.subclass(*args_, **kwargs_)
        else:
            return swidType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_bit_pos(self): return self.bit_pos
    def set_bit_pos(self, bit_pos): self.bit_pos = bit_pos
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='swidType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='swidType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='swidType'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='swidType', fromsubclass_=False):
        if self.bit_pos is not None:
            showIndent(outfile, level)
            outfile.write('<%sbit_pos>%s</%sbit_pos>\n' % (namespace_, self.gds_format_integer(self.bit_pos, input_name='bit_pos'), namespace_))
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('<%svalue>%s</%svalue>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.value)), input_name='value'), namespace_))
    def hasContent_(self):
        if (
            self.bit_pos is not None or
            self.value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='swidType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.bit_pos is not None:
            showIndent(outfile, level)
            outfile.write('bit_pos=%d,\n' % self.bit_pos)
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('value=%s,\n' % self.value)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'bit_pos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'bit_pos')
            self.bit_pos = ival_
        elif nodeName_ == 'value':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'value')
            self.value = ival_
# end class swidType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'debugpolicy'
        rootClass = debugpolicy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='xmlns:tns="http://www.qualcomm.com/debugpolicy"')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'debugpolicy'
        rootClass = debugpolicy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="debugpolicy",
        namespacedef_='xmlns:tns="http://www.qualcomm.com/debugpolicy"')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'debugpolicy'
        rootClass = debugpolicy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from auto_gen_xml_config import *\n\n')
    sys.stdout.write('import auto_gen_xml_config as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "complex_elf",
    "complex_file_properties",
    "complex_flags",
    "complex_image_bit_map",
    "complex_image_id_list",
    "complex_root_cert_hash_list",
    "complex_root_cert_hash_qc_list",
    "complex_serial_num_list",
    "debugpolicy",
    "flagType",
    "metadata",
    "swidType"
    ]
